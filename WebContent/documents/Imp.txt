Creational Patterns
			 These design patterns provides way to create objects 
			 while hiding the creation logic, rather than 
			 instantiating objects directly using new operator. 
			 This gives program more flexibility in deciding 
			 which objects need to be created for a given use case.
			
Structural Patterns
				These design patterns concern class and object 
				composition. Concept of inheritance is used to 
				compose interfaces and define ways to compose 
				objects to obtain new functionalities.

Behavioral Patterns
				These design patterns are specifically concerned 
				with communication between objects.


Spring Design Patterns
======================

Dependency injection/ or IoC (inversion of control) – Is the main principle behind decoupling process that Spring does

Factory – Spring uses factory pattern to create objects of beans using Application Context reference

// Spring uses factory pattern to create instances of the objects
BeanFactory factory = new XmlBeanFactory(new FileSystemResource("spring.xml"));
Triangle triangle = (Triangle) factory.getBean("triangle");
triangle.draw();

Proxy – used heavily in AOP, and remoting.

Singleton – by default, beans defined in spring config file (xml) are only created once. No matter how many calls were made using getBean() method, it will always have only one bean. This is because, by default all beans in spring are singletons.
This can be overridden by using Prototype bean scope.Then spring will create a new bean object for every request.

Model View Controller – The advantage with Spring MVC is that your controllers are POJOs as opposed to being servlets.
						This makes for easier testing of controllers. One thing to note is that the 
						controller is only required to return a logical view name, and the view selection is
						left to a separate ViewResolver. This makes it easier to reuse controllers for 
						different view technologies.

Front Controller – Spring provides DispatcherServlet to ensure an incoming request gets dispatched 
					to your controllers.

View Helper – Spring has a number of custom JSP tags, and velocity macros, to assist in separating code 
			  from presentation in views.

Template method – used extensively to deal with boilerplate repeated code 
				 (such as closing connections cleanly, etc..). 
				 For example JdbcTemplate, JmsTemplate, JpaTemplate.